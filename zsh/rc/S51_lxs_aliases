if [[ "$HOST" = *Lynx* ]]; then
   _PERLBIN="/c/inetpub/strawberry/perl/bin/perl.exe"

   function cperl {
      pushd /c/inetpub/wwwroot/cgi
      $_PERLBIN "$@"
      popd
   }

   function lperl { $_PERLBIN "$@" }

   function prove { $_PERLBIN "c:\inetpub\strawberry\perl\bin\prove" "$@" }

   alias startall='cperl start-MSG-service.pl installall'
   alias stopall='cperl start-MSG-service.pl removeall'
   alias checkdb='cperl checkdb.plx'
   alias lynxservice='cperl Lynx_service.plx'
   alias restartall='stopall ; startall'

   function lxs-current-version {
      #git ls-tree origin/release var/SQLServer/upgrade/ --name-only | perl -e 'print for map $_->[1], sort { $a->[0] <=> $b->[0] } map +[s(var/SQLServer/upgrade/(\d+)-\d+)($1)r, $_], <STDIN>' | tail -n1 | cut -d'-' -f2

      # From #zsh:
      # .:11:54:59:. < Valodim> (f) splits the git ls-tree output by lines
      # .:11:55:04:. < Valodim> no orders it numerically
      # .:11:55:10:. < Valodim> [-1] selects the last item
      echo ${${(s:-:)${${(no)${(f)"$(git ls-tree --name-only origin/release var/SQLServer/upgrade/)"}}[-1]}}[2]}
   }

   function lxs-next-version {
      echo $(( 1 + $(lxs-current-version) ))
   }

   function lxs-next-version-dir {
      echo "var/SQLServer/upgrade/$(lxs-current-version)-$(lxs-next-version)"
   }

   function _lxs-new-migration {
      local to="$(lxs-next-version-dir)"
      mkdir -p $to
      local filename="$to/${(j:-:)*[2,-1]}${*[1]}"
      touch $filename
      echo $filename
   }

   function lxs-new-perl-migration {
      local filename=$(_lxs-new-migration '.pl' $*)
      cp ~/template/perl-migration $filename
   }

   function lxs-new-sql-migration {
      local filename=$(_lxs-new-migration '.sql' $*)
      cp ~/template/sql-migration $filename
   }

   function lxs-new-migrations {
      printf '%s\n' ${${(M)${(f)"$(git diff HEAD '^origin/release' --name-status -- var)"}:#A*}##$'A\t'}
   }

   function lxs-mv-new-migrations {
      local to="$(lxs-next-version-dir)"
      mkdir -p $to
      for file in $(lxs-new-migrations); do
         local -a fixup
         fixup=( ${(f)"$(git log --pretty=format:%H -- $file)"} )
         #local commits="$(echo "$fixup" | wc -l)"
         local commits=$#fixup
         if [[ ! $file == ${to}* ]]; then
            if [[ $commits -eq 1 ]]; then
               git mv "$file" "$to"
               git ci --fixup "$fixup"
            else
               echo " !! Could not move $file because it had $commits commits instead of just one"
            fi
         else
            echo " -- $file already in $to"
         fi
      done
   }

   function lynxapp {
      sc stop lynxwebserver1
      $_PERLBIN c:/inetpub/wwwroot/App/script/server.pl -d
   }

fi

# vim: ft=sh


#! /usr/bin/perl -w
use strict;
use Gtk '-init';
use Gtk::Gdk::Pixbuf;
use Data::Dumper;

my $icon_file = "$ENV{ FVWM_USERDIR }/Scriptease/icons/l33t_LOG_tux.png";
my $back_file = "$ENV{ FVWM_USERDIR }/Scriptease/icons/menu_setting.png";

sub composite_icon
{
	my $src_file = shift;
	my $dest_file = shift;
#
#	create two new pixbufs
#
	my $src = Gtk::Gdk::Pixbuf->new_from_file($src_file);
	my $dest = Gtk::Gdk::Pixbuf->new_from_file($dest_file);
#
#	these are the parameters to the composite routine.
#
	my $dest_x = 9;
	my $dest_y = 9;
	my $dest_width = $src->get_width();
	my $dest_height = $src->get_height();
	my $offset_x = 9;
	my $offset_y = 9;
#
#	do the compositing (composition?).
#
	$src->composite($dest,
		$dest_x, $dest_y,
		$dest_width, 
		$dest_height,
		$offset_x, $offset_y,
		1.0, 1.0,	# scaling factors
		0,		# interpolation type - I think
		255		# overall alpha
	);
	return $dest;
}

sub plot_icon
{
	my $filename = shift;
	my ($x, $y) = (shift, shift);
#
#	(From the tutorial)
#	Create the main window, and attach delete_event signal to terminate
#	the application.  Note that the main window will not have a titlebar
#	since we're making it a popup.
#
	my $window = new Gtk::Window( "popup" );
	$window->signal_connect( "delete_event", sub { Gtk->exit( 0 ); } );
	#$window->show();
#
#	read the file as last time. We deviate from the tutorial here
#	since the tutorial assumes XPM files and most of my icons are PNGs
#
	my $pixbuf = composite_icon($filename, $back_file);
#
#	render the pixbug into a GDK pixmap - I changed the names to reflect
#	the tutorial page
#
	my ($gdkpixmap, $mask) = $pixbuf->render_pixmap_and_mask(127);
#
#	now get a pixmap widget. Dunno if there's any difference between 
#	show()ing the pixmap now, or calling show_all at the end...
#
	my $pixmap = new Gtk::Pixmap( $gdkpixmap, $mask );
	#$pixmap->show();
#
#	(back with the tutorial again) To display the pixmap, we use a
#	fixed widget to place the pixmap
#
	my $fixed = new Gtk::Fixed();
	$fixed->set_usize( 100, 100 );
	$fixed->put( $pixmap, 0, 0 );
#
#	Add button presses to the event mask, and then catch the event
#
	$fixed->add_events( [ 'button_press_mask' ] );
	$fixed->signal_connect( "button_press_event", sub { Gtk->exit( 0 ) });
#
#	add the "fixed" into the window and show it
#
	$window->add( $fixed );
	#$fixed->show();
#
#	This masks out everything except for the image itself
#
	$window->shape_combine_mask( $mask, 0, 0 );
#
#	set position and show
#
	$window->set_uposition( $x, $y );
	$window->show_all();
}


#
# now we can plot the icon. the co-ords are ignored since I don't know
# how to do that bit yet
#
plot_icon($icon_file, 400, 400);

Gtk->main;

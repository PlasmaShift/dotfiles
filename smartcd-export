smartcd export 1.0
@ scripts/home/frew/code/lynx/bash_enter
 autostash DBIC_TRACE=1
 autostash WM_DEBUG=1
 autostash CATALYST_DEBUG=1
 autostash LYNX_DSN_PATH=/home/frew/code/flu-db.txt
 autostash PERL5LIB=__PATH__/App/lib:__PATH__/cgi/My:__PATH__/cgi
 autostash lynxapp lynxservice brr loc cobr kr
 
 function lynxapp() {
    # start a subshell here to set ulimit
    plackup -R App/lib,cgi/My
 }
 
 function lynxservice() {
    cd cgi;
    # start a subshell here to set ulimit
    perl Lynx_service.plx
    mk
 }
 
 function brr() {
    git branch -r | grep -i /$1- | perl -plaE'$_ = $F[0]'
 }
 
 function loc() {
    echo $1 | cut -d'/' -f2-
 }
 
 function cobr() {
    local remote="$(brr $1)"
    git checkout -b "$(loc $remote)" $remote
 }
 
 function kr() {
    gitk "$(brr $1)"
 }
 
 function win32-logging() {
    perl -MLynx::Util -E'
       my $config_rs = Lynx::Util::dbic_connect->resultset("Config");
       sub sv {
          my ($k, $v) = @_;
          $config_rs->set_value($k, "X:/" )
       }
       sv(LOG       => "log");
       sv(Datastore => "Sound");
       sv(Mapstore  => "maps");
       sv(BackupDIR => "Backup");
    '
 }
 
 function linux-logging() {
    mkdir -p ~/code/lynx-{sound,maps,backups,logs}
    perl -MLynx::Util -E'
       my $config_rs = Lynx::Util::dbic_connect->resultset("Config");
       sub sv {
          my ($k, $v) = @_;
          $config_rs->set_value($k, "/home/frew/code/lynx-$v" )
       }
       sv(LOG       => "logs");
       sv(Datastore => "sound");
       sv(Mapstore  => "maps");
       sv(BackupDIR => "backups");
    '
 }
@ scripts/home/frew/Dropbox/money/bash_enter
 autostash PATH=__PATH__/bin:$PATH

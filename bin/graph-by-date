#!/usr/bin/env perl

use strict;
use warnings;

use Chart::Clicker;
use Chart::Clicker::Axis::DateTime;
use Chart::Clicker::Data::DataSet;
use Chart::Clicker::Data::Series;
use Text::xSV;
use DateTime;
use DateTime::Format::Strptime;
use Getopt::Long::Descriptive;

my ($opt, $usage) = describe_options(
  'cat foo.csv | graph-by-date %o',
  [ 'in_format|i=s', 'format to parse date as',  { default => '%F %T.%N' } ],
  [ 'out_file|f=s', 'file to write to',  { default => 'foo.png' } ],
  [ 'width|w=i', 'width of graph',  { default => 800 } ],
  [ 'height|H=i', 'height of graph',  { default => 600 } ],
  [ 'axis_format|a=i', 'the date format for the axis',  { default => '%Y-%m-%d' } ],
  [],
  [ 'help|h', 'view help' ],
);

print($usage->text), exit if $opt->help || -t STDIN;

my $f = new DateTime::Format::Strptime(
   pattern     => $opt->in_format,
   locale      => 'en_US',
   time_zone   => 'UTC',
);

my $csv = Text::xSV->new( fh => *STDIN );

my @date;
my @val;
while (my $row = $csv->get_row) {
   my ($time, @row_val) = @$row;
   push @date, $f->parse_datetime($time)->epoch;
   @row_val = (1) unless @row_val;
   push @val, \@row_val;
}

my $cc = Chart::Clicker->new( width => $opt->width, height => $opt->height );

my @series = map {
   my $chart = $_;
   Chart::Clicker::Data::Series->new(
      values => [map $_->[$chart], @val],
      keys => \@date,
   )
} 0..(scalar @{$val[0]} - 1);

my @ds = map Chart::Clicker::Data::DataSet->new( series => [$_] ), @series;

$cc->add_to_datasets($_) for @ds;

my $def = $cc->get_context('default');

my $dtaxis = Chart::Clicker::Axis::DateTime->new(
    format => $opt->axis_format,
    position => 'bottom',
    orientation => 'horizontal'
);
$def->domain_axis($dtaxis);
$def->renderer->brush->width(1);
$cc->write_output($opt->out_file);

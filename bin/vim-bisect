#!/usr/bin/env perl

use 5.20.1;
use warnings;

use autodie;

use experimental 'postderef';

use IO::All;

use JSON;
use Set::Scalar;

my %state = (
   pinned_on  => [qw( bundle/vimoutliner )],
   pinned_off => [],
   bisection_set => [ # {{{
      qw(
      bundle-lua/neocomplete
      bundle-nvim/deoplete
      bundle-python/editorconfig
      bundle-python/ultisnips
      bundle/FastFold
      bundle/IndentAnything
      bundle/abolish
      bundle/airline
      bundle/better-whitespace
      bundle/colors-solarized
      bundle/commentary
      bundle/csv
      bundle/ctrlp
      bundle/dispatch
      bundle/eunuch
      bundle/exchange
      bundle/fugitive
      bundle/gitgutter
      bundle/go
      bundle/goyo
      bundle/haystack
      bundle/inkpot
      bundle/javascript-indentation
      bundle/jinja-syntax
      bundle/l9
      bundle/matchit
      bundle/matchmaker
      bundle/metacosm
      bundle/obsession
      bundle/pathogen
      bundle/perl
      bundle/projectionist
      bundle/python
      bundle/quick-scope
      bundle/repeat
      bundle/rust
      bundle/salt
      bundle/sleuth
      bundle/splitjoin
      bundle/surround
      bundle/synastic
      bundle/tabular
      bundle/terminus
      bundle/textobj-between
      bundle/textobj-entire
      bundle/textobj-lastpat
      bundle/textobj-underscore
      bundle/textobj-user
      bundle/textobj-word-column
      bundle/unimpaired
      bundle/vimoutliner
      bundle/vinegar
      bundle/visual-star-search
      bundle/windowswap
      bundle/wipeout
   )],
   # }}}
   determined_to_remove => [qw()],
   temporarily_out => [],
   temporarily_in  => [],
);

sub init {
   local $ENV{GIT_WORK_TREE} = $ENV{DOTFILES};
   local $ENV{GIT_DIR} = "$ENV{GIT_WORK_TREE}/.git";

   my $re = qr{^vim/(bundle(?:|-lua|-python|-nvim)/[^/]+)$};
   my %state = (
      pinned_on => [],
      pinned_off => [],
      bisection_set => [
         map { chomp; $_ }
         map { m/$re/; $1 }
         grep m/$re/,
         `git ls-files`
      ],
   );

   _store_state(%state)
}

sub _vb_state_path { $ENV{VB_STATE_PATH} || "$ENV{HOME}/.vim-bisect-state" }

sub _store_state {
   my %state = @_;

   open my $fh, '>', _vb_state_path();
   print $fh encode_json(\%state);
}

sub _load_state {
   open my $fh, '<', _vb_state_path();
   %{decode_json(<$fh>)}
}

sub _sync_state {
   my %state = @_;

   # my $all = Set::Scalar->new( $state{bisection_set}->@* );
   _restore($_) for $state{pinned_on}->@*, $state{temporarily_in}->@*;
   _remove($_) for $state{pinned_off}->@*, $state{temporarily_out}->@*;
}

sub _remove { system qw( rm -rf ), "$ENV{HOME}/.vim/" . shift }
sub _restore {
   local $ENV{GIT_WORK_TREE} = $ENV{DOTFILES};
   local $ENV{GIT_DIR} = "$ENV{GIT_WORK_TREE}/.git";

   my $item = shift;

   system qw( git checkout ), "vim/$item";
   system qw( git submodule sync ), "vim/$item";
}

main->can(shift)->()

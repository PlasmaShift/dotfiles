#!/usr/bin/env perl

use strict;
use warnings;

$|++;

use IO::Async::Loop;
use IO::Async::Timer::Periodic;
use IO::Async::Stream;

use IO::Termios;
my $stdin = IO::Termios->new( \*STDIN );
$stdin->setflag_echo(0);
$stdin->setflag_icanon(0);

my $loop = IO::Async::Loop->new;
my $clear = "\r\x1b[J";

my $initial_seconds = shift || 25 * 60;
my $seconds_remaining = $initial_seconds;
my $pause;
$0 = 'pomotimer';
print "[p]ause [r]eset abort[!]\n\n";
my $timer = IO::Async::Timer::Periodic->new(
   first_interval => 0,
   interval => 1,

   on_tick => sub {
      if ($seconds_remaining >= 1) {
         unless ($pause) {
            $0 = 'PT' . format_time($seconds_remaining)
               if $seconds_remaining % 30 == 0;
            print $clear . format_time($seconds_remaining--)
         }
      } else {
         print $clear . "Take a break!\a\n";
         shift->loop->stop;
      }
   },
);


$timer->start;

$loop->add( $timer );

my $handle = IO::Async::Stream->new(
   handle => \*STDIN,

   on_read  => sub {
      my ( $self, $buffref, $eof ) = @_;

      $pause = !$pause if $$buffref =~ m/^p/;
      $seconds_remaining = $initial_seconds if $$buffref =~ m/^r/;
      if ($$buffref =~ m/^!/) {
         print $clear . "aborting timer!\n";
         $self->loop->stop;
         exit 1;
      }

      $$buffref = '';

      return 0;
   },
);

$loop->add( $handle );

$loop->run;

sub format_time {
   my $s = shift;

   sprintf "%02d:%02d remaining",
      int($s / 60), $s % 60
}

#!/usr/bin/env perl

use 5.20.1;
use warnings;
use IO::All;
use JSON::MaybeXS 'decode_json';
use Linux::Inotify2;
use IO::Handle;
use IO::Async::Loop;
use IO::Async::Handle;
use IO::Async::Timer::Countdown;

$|++;

use experimental 'postderef';
my $config = shift;
my @watches = decode_json(io->file($config)->all)->@*;

my $loop = IO::Async::Loop->new;

my $inotify = new Linux::Inotify2
   or die "unable to create new inotify object: $!";

my $mask = IN_MODIFY | IN_ATTRIB | IN_MOVED_TO | IN_CREATE | IN_DELETE | IN_DELETE_SELF | IN_MOVE_SELF;

while (my ($dirs, $svcs) = splice @watches, 0, 2) {

   for my $outer_dir (@$dirs) {

      my $timer = IO::Async::Timer::Countdown->new(
         delay => 0.5,

         on_expire => sub {
            for my $service (@$svcs) {
               my $svc_dir = io->dir("$ENV{SVDIR}/$service/supervise");

               if ($svc_dir->file('stat')->all =~ /run/) {
                  say "restarting service: $service";
                  $svc_dir->file('control')
                     ->print('tcu') # sigTerm, sigCont, "Up"
               }
            }
         },
      );

      $loop->add( $timer );

      for my $dir (io->dir($outer_dir)->All_Dirs) {
         say "watching $dir";
         $inotify->watch ($dir, $mask, sub {
            if ($timer->is_running) {
               $timer->reset
            } else {
               $timer->start
            }
         }) or die "unable to create new inotify object: $!";
      }

   }
}

my $exit = $loop->new_future;

$inotify->watch(
   $config, $mask, sub { say "config modified, restarting"; $exit->done }
);

my $handle = IO::Async::Handle->new(
   read_handle => do {
      my $h = IO::Handle->new;
      $h->fdopen($inotify->fileno, 'r');
      $h
   },
   on_read_ready => sub { $inotify->poll },
);

$loop->add($handle);

$exit->get;

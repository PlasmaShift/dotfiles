#!/usr/bin/env python3

from imaplib import IMAP4_SSL
from netrc import netrc
from email import message_from_bytes
from argparse import ArgumentParser
from email.header import decode_header, make_header
from re import sub

parser = ArgumentParser(description='Check email')
parser.add_argument('-n', '--count', dest='count', action='store',
                   default=1, type=int,
                   help='How many messages to show')

parser.add_argument('--body', dest='content_type', action='store',
                   help='Which (if any) body to show')

parser.add_argument('--header', dest='header', action='store',
                   default='subject',
                   help='Which (if any) header to show')

parser.add_argument('--list-attachments', dest='list_attachments',
                   action='store_true',
                   help='Show a list of attachments')

parser.add_argument('--show-attachment', dest='show_attachment',
                   action='store',
                   help='Which (if any) attachment to show')

parser.add_argument('-i', '--id', dest='id', action='store',
                   help='Which (if any) message to show')

args = parser.parse_args()

conn = IMAP4_SSL('imap.gmail.com')
auth = netrc().hosts['imap.gmail.com']

conn.login(auth[0], auth[2])
conn.select()

def show_header(num, message):
    header = message.get(args.header)
    # this is stupid.
    decoded_header = str(make_header(decode_header(header)))
    # this is stupid
    unfolded_header = sub('[\r\n]', '', decoded_header)
    # why do I have to cast to int?  shouldn't %i do that?
    print("%i: %s" % (int(num), unfolded_header))

def show_body(num, message):
    for part in message.walk():
        if part.get_content_type() == args.content_type:
            # why does this look like double decoding?
            print(part.get_payload(decode=True).decode("utf-8"))

def list_attachments(message):
    i = 0
    for part in message.walk():
        disp = part.get('content-disposition')
        # seems brittle...
        if not (disp and disp.startswith("ATTACHMENT;")):
            continue
        i += 1
        print(str(i) + ": " + disp)

def show_attachment(num, message):
    i = 0
    for part in message.walk():
        if part.get('content-disposition'):
            i += 1
            if int(i) == int(num):
                print(part.get_payload(decode=True).decode("utf-8"))

def handle_mail(num, message):
    if args.content_type:
        show_body(num, message)
    elif args.list_attachments:
        list_attachments(message)
    elif args.show_attachment:
        show_attachment(args.show_attachment, message)
    else:
        show_header(num, message)

def handle_messages(message_spec):
    typ, data = conn.fetch(message_spec, '(BODY.PEEK[])')
    for m in reversed(data):
        # why is the last one not a tuple like the rest?  who knows.
        if len(m) != 2:
            continue
        num = m[0].split(b' ')[0]
        email = message_from_bytes(m[1])
        handle_mail(int(num), email)

if args.id:
    handle_messages(args.id)
else:
    typ, data = conn.search(None, 'ALL')
    # wow, look at all this casting
    first = int(data[0].split()[-1])
    last = int(first) - args.count + 1
    message_set = str(str(first) + ":" + str(last))
    handle_messages(message_set)

conn.close()
conn.logout()
